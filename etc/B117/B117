ArrayListに限らず、LinkedListの場合にも当てはまりますし
HashMapやLinkedHashMapを利用する場合はMapインタフェースを利用しましょう。

実際に利用するオブジェクトを「ArrayList」型で作成してしまうと他の形に変更できません。
最初はArrayListで実装していて問題は出ていなかったものの、だんだんと扱う件数が増えてきて
さらに、ArrayListのadd(int index, E element)を利用した末尾以外への追加を行っていた場合
ArrayListでは性能面で問題が出てくるかもしれません。

このような場合
List<String> dataList = new ArrayList<>();
としていたら
List<String> dataList = new TreeList<>();
とするだけで、Listの実装を「ArrayListからTreeList」に変更することが可能です。

しかし、
ArrayList<String>　dataList = new ArrayList<>();
と書いていると、Listインタフェースには存在しないメソッドを呼び出している可能性があるため
全てのソースコードを見直さないと、ArrayListをTreeListに差し替えることができません。

インタフェースが用意されているクラスは、実装クラスを直接利用するのではなく
インタフェースを利用して実装クラスにアクセスするようにすることで
同じインタフェースを利用している、異なる実装のクラスへの変更が非常に容易にできます。

インタフェースにより規格が統一されているため、その規格の裏で動く実装クラスをある程度自由に変更可能となるわけです。
そのため、インタフェースが用意されているクラスは、インタフェースを使って利用しましょう。