package paiza.b117;

import java.util.*;

/**
 * B117問題は教習者がコースを周りながら割り当てられた順番通りに出口を出ていき、最後に出口を出ていく教習者がコースを何周したかを求める。
 * そのため教習者を起点とし、ㇽープさせ教習者の割り当てられた順を確認して行くことで最終的に何周をしたかを計算する。
 * <p>
 * 教習所内の車は、1から連番で教習所から出る順番が決まっていて、以下の二つは存在しない前提となっている。
 * ・順番の重複（3, 2, 1, 2）はない。
 * ・順番の飛び（1, 2, 3, 5）はない。
 * <p>
 * そのため、教習所の車リストを順番に回して、1から順番に教習所から外に出ていく車を除外していく。
 * 教習所を出た車の番号と、最大の車の番号が一致するところまで処理を進めたら
 * 最後の車が教習所を出たことになるので、そこまでに教習所を周回した回数が答えとなる。
 *
 * @author kang yohan
 */

public class B117 {

    //教習車の数
    static int carNum;
    //並び順に教習者を格納するリスト
    static ArrayList<Integer> cars = new ArrayList<>();

    public static void main(String[] args) {
        //------------------------------------------------------------
        // 入力
        //------------------------------------------------------------
        try (Scanner sc = new Scanner(System.in)) {
            //教習車の数を取得
            carNum = sc.nextInt();
            //教習者の並び順を取得
            for (int i = 0; i < carNum; i++) {
                cars.add(sc.nextInt());
            }
        }

        //------------------------------------------------------------
        // 集計
        //------------------------------------------------------------
        //合計周回を計算する
        int totalAroundCnt = calcTotalAroundCnt(cars);

        //------------------------------------------------------------
        // 出力
        //------------------------------------------------------------
        //合計周回を出力する
        System.out.println(totalAroundCnt);
    }

    /**
     * 合計周回を求める
     *
     * @param cars
     */
    //------------------------------------------------------------
    //・指摘事項
    //1、ループを回すときはなるべくインデックスを使用せずにList、Set、Arrayなどのコレクションのfor文を使って実装すること！！！！
    //これによって予期しないインデックスエラーを防ぐことができる。
    //2、問題を解く際にループをwhile文また、再帰(do while文)をどっちを使用した方が良いか判断して実装すること。
    //------------------------------------------------------------
    static int calcTotalAroundCnt(ArrayList<Integer> cars) {
        //教習車が教習所を出ていく順番。最初は1番から出ていくため1で初期化する
        int carOutIdx = 1;
        //最後の教習車が最終的に教習所を周った回数
        int totalAroundCnt = 0;

        //教習車の総合数と教習車が出ていく順番が同じになった場合は全ての教習車が出ていったことと同じなため終了する
        while (carNum >= carOutIdx) {
            //まだ教習所に残っている教習車
            ArrayList<Integer> remainCars = new ArrayList<>();
            //教習車を回す
            for (int carNo : cars) {
                if (carOutIdx == carNo) {
                    //一番小さい順から教習所を出ていく。教習車が出た場合は出る順番を次の番号に更新する
                    carOutIdx++;
                } else {
                    //自分より小さい番号の車がまだあり、教習所の中に残る車を記録する
                    remainCars.add(carNo);
                }
            }

            //一周周ったため総合周回を一周加算する
            totalAroundCnt++;
            //残っている教習車で再度教習所を回す
            cars = remainCars;
        }

        //最終的に最後の教習車まで総合回数に加算されるため一周引いてあげる
        return --totalAroundCnt;
    }
}
